// This file was generated by counterfeiter
package lockfile

import (
	"sync"
)

type Fake struct {
	LockStub        func(filepath string) error
	lockMutex       sync.RWMutex
	lockArgsForCall []struct {
		filepath string
	}
	lockReturns struct {
		result1 error
	}
	PIdOfOwnerStub        func(filepath string) int
	pIdOfOwnerMutex       sync.RWMutex
	pIdOfOwnerArgsForCall []struct {
		filepath string
	}
	pIdOfOwnerReturns struct {
		result1 int
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Lock(filepath string) error {
	fake.lockMutex.Lock()
	fake.lockArgsForCall = append(fake.lockArgsForCall, struct {
		filepath string
	}{filepath})
	fake.recordInvocation("Lock", []interface{}{filepath})
	fake.lockMutex.Unlock()
	if fake.LockStub != nil {
		return fake.LockStub(filepath)
	}
	return fake.lockReturns.result1
}

func (fake *Fake) LockCallCount() int {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return len(fake.lockArgsForCall)
}

func (fake *Fake) LockArgsForCall(i int) string {
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	return fake.lockArgsForCall[i].filepath
}

func (fake *Fake) LockReturns(result1 error) {
	fake.LockStub = nil
	fake.lockReturns = struct {
		result1 error
	}{result1}
}

func (fake *Fake) PIdOfOwner(filepath string) int {
	fake.pIdOfOwnerMutex.Lock()
	fake.pIdOfOwnerArgsForCall = append(fake.pIdOfOwnerArgsForCall, struct {
		filepath string
	}{filepath})
	fake.recordInvocation("PIdOfOwner", []interface{}{filepath})
	fake.pIdOfOwnerMutex.Unlock()
	if fake.PIdOfOwnerStub != nil {
		return fake.PIdOfOwnerStub(filepath)
	}
	return fake.pIdOfOwnerReturns.result1
}

func (fake *Fake) PIdOfOwnerCallCount() int {
	fake.pIdOfOwnerMutex.RLock()
	defer fake.pIdOfOwnerMutex.RUnlock()
	return len(fake.pIdOfOwnerArgsForCall)
}

func (fake *Fake) PIdOfOwnerArgsForCall(i int) string {
	fake.pIdOfOwnerMutex.RLock()
	defer fake.pIdOfOwnerMutex.RUnlock()
	return fake.pIdOfOwnerArgsForCall[i].filepath
}

func (fake *Fake) PIdOfOwnerReturns(result1 int) {
	fake.PIdOfOwnerStub = nil
	fake.pIdOfOwnerReturns = struct {
		result1 int
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.lockMutex.RLock()
	defer fake.lockMutex.RUnlock()
	fake.pIdOfOwnerMutex.RLock()
	defer fake.pIdOfOwnerMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ LockFile = new(Fake)
