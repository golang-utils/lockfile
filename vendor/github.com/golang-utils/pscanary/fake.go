// This file was generated by counterfeiter
package pscanary

import (
	"sync"
)

type Fake struct {
	IsAliveStub        func(processId int) bool
	isAliveMutex       sync.RWMutex
	isAliveArgsForCall []struct {
		processId int
	}
	isAliveReturns struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) IsAlive(processId int) bool {
	fake.isAliveMutex.Lock()
	fake.isAliveArgsForCall = append(fake.isAliveArgsForCall, struct {
		processId int
	}{processId})
	fake.recordInvocation("IsAlive", []interface{}{processId})
	fake.isAliveMutex.Unlock()
	if fake.IsAliveStub != nil {
		return fake.IsAliveStub(processId)
	}
	return fake.isAliveReturns.result1
}

func (fake *Fake) IsAliveCallCount() int {
	fake.isAliveMutex.RLock()
	defer fake.isAliveMutex.RUnlock()
	return len(fake.isAliveArgsForCall)
}

func (fake *Fake) IsAliveArgsForCall(i int) int {
	fake.isAliveMutex.RLock()
	defer fake.isAliveMutex.RUnlock()
	return fake.isAliveArgsForCall[i].processId
}

func (fake *Fake) IsAliveReturns(result1 bool) {
	fake.IsAliveStub = nil
	fake.isAliveReturns = struct {
		result1 bool
	}{result1}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isAliveMutex.RLock()
	defer fake.isAliveMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ PsCanary = new(Fake)
